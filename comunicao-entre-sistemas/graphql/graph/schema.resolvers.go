package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.35

import (
	"context"

	"github.com/greg0x46/fc2-graphql/graph/model"
)

// Type is the resolver for the type field.
func (r *animalResolver) Type(ctx context.Context, obj *model.Animal) (*model.Class, error) {
	class, err := r.ClassDB.FindByAnimalId(obj.ID)
	if err != nil {
		return nil, err
	}

	return &model.Class{
		ID:          class.ID,
		Name:        class.Name,
		Description: &class.Description,
	}, nil
}

// Animals is the resolver for the animals field.
func (r *classResolver) Animals(ctx context.Context, obj *model.Class) ([]*model.Animal, error) {
	animals, err := r.AnimalDB.FindByClassID(obj.ID)
	if err != nil {
		return nil, err
	}

	var animalsModel []*model.Animal
	for _, animal := range animals {
		animalsModel = append(animalsModel, &model.Animal{
			ID:          animal.ID,
			Name:        animal.Name,
			Description: &animal.Description,
		})
	}

	return animalsModel, nil
}

// CreateClass is the resolver for the createClass field.
func (r *mutationResolver) CreateClass(ctx context.Context, input model.NewClass) (*model.Class, error) {
	class, err := r.ClassDB.Create(input.Name, *input.Description)

	if err != nil {
		return nil, err
	}

	return &model.Class{
		ID:          class.ID,
		Name:        class.Name,
		Description: &class.Description,
	}, nil
}

// CreateAnimal is the resolver for the createAnimal field.
func (r *mutationResolver) CreateAnimal(ctx context.Context, input model.NewAnimal) (*model.Animal, error) {
	animal, err := r.AnimalDB.Create(input.Name, *input.Description, input.ClassID)
	if err != nil {
		return nil, err
	}

	return &model.Animal{
		ID:          animal.ID,
		Name:        animal.Name,
		Description: &animal.Description,
	}, nil
}

// Classes is the resolver for the classes field.
func (r *queryResolver) Classes(ctx context.Context) ([]*model.Class, error) {
	classes, err := r.ClassDB.FindAll()
	if err != nil {
		return nil, err
	}

	var classesModel []*model.Class
	for _, class := range classes {
		classesModel = append(classesModel, &model.Class{
			ID:          class.ID,
			Name:        class.Name,
			Description: &class.Description,
		})
	}

	return classesModel, nil
}

// Animals is the resolver for the animals field.
func (r *queryResolver) Animals(ctx context.Context) ([]*model.Animal, error) {
	animals, err := r.AnimalDB.FindAll()
	if err != nil {
		return nil, err
	}

	var animalsModel []*model.Animal
	for _, animal := range animals {
		animalsModel = append(animalsModel, &model.Animal{
			ID:          animal.ID,
			Name:        animal.Name,
			Description: &animal.Description,
		})
	}

	return animalsModel, nil
}

// Animal returns AnimalResolver implementation.
func (r *Resolver) Animal() AnimalResolver { return &animalResolver{r} }

// Class returns ClassResolver implementation.
func (r *Resolver) Class() ClassResolver { return &classResolver{r} }

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type animalResolver struct{ *Resolver }
type classResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
